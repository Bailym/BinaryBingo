{"version":3,"sources":["NavBar/navBar.js","Draw/draw.js","BingoCard/bingoCard.js","LandingPage/landingPage.js","index.js"],"names":["NavBar","Draw","useState","numbersCalled","setNumbersCalled","lastNumber","setLastNumber","numberComponents","setNumberComponents","numsHidden","setNumsHidden","pad","str","max","toString","length","getNumber","paddedNum","Math","floor","random","alert","includes","toggleHideNums","useEffect","newComponent","className","id","href","process","src","alt","onClick","BingoCard","numbers","setNumbers","cards","setCards","changeColour","e","button","target","currentColour","style","backgroundColor","console","log","color","tempNumbers","i","randomNumber","push","tempCards","LandingPage","to","Content","Layout","Header","Footer","Index","minHeight","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce53c07d.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\r\nimport {Menu} from 'antd';\r\nimport {Link} from 'react-router-dom';\r\n\r\nvar navHeaders = [\"Draw\", \"Card\", \"About\"];\r\n\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['0']}>\r\n            {navHeaders.map((value, i) => {\r\n                return <Menu.Item key={i}  ><Link to={value.toLowerCase()}>{value}</Link></Menu.Item>;\r\n            })}\r\n        </Menu>)\r\n}\r\n\r\nexport default NavBar;","\r\nimport { useEffect, useState } from 'react';\r\nimport \"./draw.css\";\r\n\r\n\r\n\r\nfunction Draw() {\r\n\r\n    //state hooks\r\n    const [numbersCalled, setNumbersCalled] = useState([]);\r\n    const [lastNumber, setLastNumber] = useState(\"\");\r\n    const [numberComponents, setNumberComponents] = useState([]);\r\n    const [numsHidden, setNumsHidden] = useState(false);\r\n\r\n    //pads a binary number with zeros to the left since 0001 is a valid binary number etc.\r\n    function pad(str, max) {\r\n        str = str.toString();\r\n        return str.length < max ? pad(\"0\" + str, max) : str;\r\n    }\r\n\r\n    //generates a random binary number that isnt already in the numbersCalled array\r\n    function getNumber() {\r\n\r\n        //generare a random number between 0 and 15 (4 bits)\r\n        let randomNumber = Math.floor(Math.random() * 16);\r\n        //convert the number to binary\r\n        let binaryNumber = randomNumber.toString(2);\r\n        //pad the binary number to 4 bits\r\n        let paddedNum = pad(binaryNumber, 4)\r\n\r\n        //check if paddedNum is in the array\r\n        if (numbersCalled.length >= 16) {\r\n            alert(\"You have called all the numbers!\")\r\n        }\r\n        else if (numbersCalled.includes(paddedNum)) {\r\n            //if it is, get another number\r\n            getNumber();\r\n        }\r\n        //if not then add it to the array.\r\n        else {\r\n            setLastNumber(paddedNum);\r\n            setNumbersCalled(numbersCalled => [...numbersCalled, paddedNum]);   //adds the number to the array\r\n        }\r\n    }\r\n\r\n    //when numberscalled changes, this function is called.\r\n    useEffect(() => {\r\n        let newComponent = <li className='numbers-list-item'>{lastNumber}</li>\r\n        setNumberComponents(numberComponents => [...numberComponents, newComponent]);\r\n    }, [numbersCalled]);\r\n\r\n\r\n    function toggleHideNums() {\r\n        setNumsHidden(!numsHidden);\r\n    }\r\n\r\n    return (\r\n        <div className=\"draw-container\">\r\n            <div id=\"title-div\">\r\n                <a href={process.env.PUBLIC_URL + \"/\"}><img id='back-icon' src={process.env.PUBLIC_URL + \"/BackArrow.png\"} alt=\"back to landing page\" /></a>\r\n                <h1>HOW IT WORKS.</h1>\r\n                <div className='column-3'></div>\r\n            </div>\r\n\r\n            <div id=\"rules-div\">\r\n                <ul>\r\n                    <li>1. Students should go to the <a href=\"/card\">card</a> page. This will give them a Bingo Card which they can tick off.</li>\r\n                    <li>2. The teacher clicks the button below and calls out the random 4-bit binary number</li>\r\n                    <li>3. Students will need to convert the 4-bit binary number into denary</li>\r\n                    <li>4. If the number appears on a students card they should click the number to tick it off.</li>\r\n                    <li>5. Repeat this process until a student has all numbers on their card ticked off.</li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div id=\"draw-div\">\r\n                <div id=\"numbers-list-div\">\r\n                    {!numsHidden ?\r\n                        <ul id=\"numbers-list\">\r\n                            <h3>Numbers Called</h3>\r\n                            {numberComponents}\r\n                            <li className='numbers-list-item hide-list' onClick={() => toggleHideNums()}>[HIDE]</li>\r\n                        </ul> :\r\n                        <p onClick={() => toggleHideNums()} id=\"open-numbers-list\">[Show]</p>}\r\n                </div>\r\n\r\n                <div id=\"draw-controls\">\r\n                    <h2>{lastNumber !== \"\" ? lastNumber : \"????\"}</h2>\r\n                    <button className='draw-button' onClick={() => getNumber()}> Draw</button>\r\n                </div>\r\n                <div className=\"column-3\">\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Draw","\r\nimport { useEffect, useState } from 'react';\r\nimport './bingoCard.css';\r\n\r\nfunction BingoCard() {\r\n\r\n    const [numbers, setNumbers] = useState([]);\r\n    const [cards, setCards] = useState([]);\r\n\r\n    //hook equivalent to componentDidMount() must have [] as the second parameter\r\n    useEffect(() => {\r\n        let tempNumbers = [];   //holds the numbers to be added to state\r\n\r\n        //generate 4 random numbers between 0 and 15    \r\n        for (let i = 0; i < 4; i++) {\r\n            let randomNumber = Math.floor(Math.random() * 16);\r\n\r\n            //stop duplicate numbers\r\n            while (tempNumbers.includes(randomNumber)) {\r\n                randomNumber = Math.floor(Math.random() * 16);\r\n            }\r\n            //add to list\r\n            tempNumbers.push(randomNumber);\r\n        }\r\n\r\n        setNumbers(tempNumbers);    //this wont update immediately. it will wait for the next render.   \r\n    }, []);\r\n\r\n    //when numbers updates on next render.\r\n    useEffect(() => {\r\n        //generate a card for each number\r\n        let tempCards = [];\r\n        for (var i = 0; i <= 3; i++) {\r\n            tempCards.push(\r\n                <button onClick={changeColour} key={i} className='box'>\r\n                    {numbers[i]}\r\n                </button>);\r\n        }\r\n        setCards(tempCards)\r\n    }, [numbers]);\r\n\r\n    //function to change button to red when clicked and vice versa\r\n    function changeColour(e) {\r\n        let button = e.target;\r\n        let currentColour = button.style.backgroundColor;\r\n\r\n        console.log(currentColour)\r\n\r\n        //if pink, change to white\r\n        if (currentColour === \"rgb(251, 97, 189)\") {\r\n            button.style.backgroundColor = \"rgb(255,255,255)\";\r\n            button.style.color = 'rgb(235, 235, 235)'\r\n        }\r\n        //else change to pink.\r\n        else {\r\n            button.style.backgroundColor = \"rgb(251, 97, 189)\";\r\n            button.style.color = 'rgb(255, 255, 255)'\r\n        }\r\n    }\r\n\r\n    //render the bingo card\r\n    return (\r\n        <div className=\"card-div\">\r\n            <div id=\"title-div\">\r\n                <a href={process.env.PUBLIC_URL + \"/\"}><img id='back-icon' src={process.env.PUBLIC_URL + \"/BackArrow.png\"} alt=\"back to landing page\" /></a>\r\n                <h1>HOW IT WORKS.</h1>\r\n                <div className='column-3'></div>\r\n            </div>\r\n\r\n            <div id=\"rules-div\">\r\n                <ul>\r\n                    <li>1. The teacher will call out a random 4-bit binary number</li>\r\n                    <li>2. Students will need to convert the 4-bit binary number into denary</li>\r\n                    <li>3. If the number appears on your card below, click the number to tick it off.</li>\r\n                    <li>4. Repeat. If you tick off all numbers on your card call out 'BINGO'.</li>\r\n                </ul>\r\n            </div>\r\n            <div className='card-container'>\r\n                {cards}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default BingoCard;\r\n\r\n\r\n","import \"./landingPage.css\";\r\nimport {Link } from 'react-router-dom';\r\n\r\nfunction LandingPage() {\r\n  return (\r\n    <div className=\"landing-div\">\r\n        <h1>BINARY BINGO.</h1>\r\n        <button className=\"landing-button landing-button-red\">\r\n            <Link to=\"/Draw\">Teacher</Link>\r\n        </button>\r\n        <button className=\"landing-button landing-button-blue\">\r\n            <Link to=\"/Card\">Student</Link>\r\n        </button>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\r\nimport \"./index.css\";\r\nimport NavBar from \"./NavBar/navBar\";\r\nimport Draw from \"./Draw/draw\";\r\nimport { Layout } from 'antd';\r\nimport BingoCard from './BingoCard/bingoCard';\r\nimport LandingPage from './LandingPage/landingPage';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\n\r\nfunction Index() {\r\n  return (\r\n    <Router>\r\n      <Layout className=\"layout\">\r\n        {/* <Header style={{ minHeight: \"5vh\" }}>\r\n          <NavBar />\r\n        </Header> */}\r\n        <Content style={{ minHeight: \"85vh\" }}>\r\n          <Routes>\r\n            <Route path=\"/card\" element={<BingoCard />} />\r\n            <Route path=\"/draw\" element={<Draw />} />\r\n            <Route path=\"/\" element={<LandingPage />} />\r\n          </Routes>\r\n        </Content>\r\n        <Footer className=\"footer\">\r\n          B Martin 2021\r\n        </Footer>\r\n      </Layout>\r\n    </Router>)\r\n\r\n}\r\nReactDOM.render(<Index />, document.getElementById('root'));  //render the componen - calls the render() function.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}